# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CLCache

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Shader(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Shader()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsShader(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Shader
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Shader
    def Buffer(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Shader
    def BufferAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # Shader
    def BufferLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Shader
    def BufferIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Shader
    def Program(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Shader
    def Kernel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Shader
    def BuildInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Shader
    def Md5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ShaderStart(builder):
    builder.StartObject(5)

def Start(builder):
    ShaderStart(builder)

def ShaderAddBuffer(builder, buffer):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffer), 0)

def AddBuffer(builder, buffer):
    ShaderAddBuffer(builder, buffer)

def ShaderStartBufferVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartBufferVector(builder, numElems):
    return ShaderStartBufferVector(builder, numElems)

def ShaderAddProgram(builder, program):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(program), 0)

def AddProgram(builder, program):
    ShaderAddProgram(builder, program)

def ShaderAddKernel(builder, kernel):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(kernel), 0)

def AddKernel(builder, kernel):
    ShaderAddKernel(builder, kernel)

def ShaderAddBuildInfo(builder, buildInfo):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(buildInfo), 0)

def AddBuildInfo(builder, buildInfo):
    ShaderAddBuildInfo(builder, buildInfo)

def ShaderAddMd5(builder, md5):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(md5), 0)

def AddMd5(builder, md5):
    ShaderAddMd5(builder, md5)

def ShaderEnd(builder):
    return builder.EndObject()

def End(builder):
    return ShaderEnd(builder)
