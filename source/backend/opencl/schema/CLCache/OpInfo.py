# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CLCache

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OpInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OpInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOpInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OpInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OpInfo
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OpInfo
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OpInfo
    def Inputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CLCache.TensorInfo import TensorInfo
            obj = TensorInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OpInfo
    def InputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpInfo
    def InputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # OpInfo
    def Outputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CLCache.TensorInfo import TensorInfo
            obj = TensorInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OpInfo
    def OutputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpInfo
    def OutputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def OpInfoStart(builder):
    builder.StartObject(4)

def Start(builder):
    OpInfoStart(builder)

def OpInfoAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    OpInfoAddName(builder, name)

def OpInfoAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def AddType(builder, type):
    OpInfoAddType(builder, type)

def OpInfoAddInputs(builder, inputs):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(inputs), 0)

def AddInputs(builder, inputs):
    OpInfoAddInputs(builder, inputs)

def OpInfoStartInputsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInputsVector(builder, numElems):
    return OpInfoStartInputsVector(builder, numElems)

def OpInfoAddOutputs(builder, outputs):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(outputs), 0)

def AddOutputs(builder, outputs):
    OpInfoAddOutputs(builder, outputs)

def OpInfoStartOutputsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOutputsVector(builder, numElems):
    return OpInfoStartOutputsVector(builder, numElems)

def OpInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return OpInfoEnd(builder)
