# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CLCache

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GemmInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GemmInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGemmInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GemmInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GemmInfo
    def GemmSize(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GemmInfo
    def GemmSizeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # GemmInfo
    def GemmSizeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GemmInfo
    def GemmSizeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # GemmInfo
    def ParamInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GemmInfo
    def ParamInfoAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # GemmInfo
    def ParamInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GemmInfo
    def ParamInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # GemmInfo
    def Md5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def GemmInfoStart(builder):
    builder.StartObject(3)

def Start(builder):
    GemmInfoStart(builder)

def GemmInfoAddGemmSize(builder, gemmSize):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(gemmSize), 0)

def AddGemmSize(builder, gemmSize):
    GemmInfoAddGemmSize(builder, gemmSize)

def GemmInfoStartGemmSizeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartGemmSizeVector(builder, numElems):
    return GemmInfoStartGemmSizeVector(builder, numElems)

def GemmInfoAddParamInfo(builder, paramInfo):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(paramInfo), 0)

def AddParamInfo(builder, paramInfo):
    GemmInfoAddParamInfo(builder, paramInfo)

def GemmInfoStartParamInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartParamInfoVector(builder, numElems):
    return GemmInfoStartParamInfoVector(builder, numElems)

def GemmInfoAddMd5(builder, md5):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(md5), 0)

def AddMd5(builder, md5):
    GemmInfoAddMd5(builder, md5)

def GemmInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return GemmInfoEnd(builder)
