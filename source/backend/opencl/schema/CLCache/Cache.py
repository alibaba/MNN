# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CLCache

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cache(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cache()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCache(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cache
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cache
    def Backends(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CLCache.BackendInfo import BackendInfo
            obj = BackendInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cache
    def BackendsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Cache
    def BackendsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Cache
    def Tuned(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CLCache.OpInfo import OpInfo
            obj = OpInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cache
    def TunedLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Cache
    def TunedIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def CacheStart(builder):
    builder.StartObject(2)

def Start(builder):
    CacheStart(builder)

def CacheAddBackends(builder, backends):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(backends), 0)

def AddBackends(builder, backends):
    CacheAddBackends(builder, backends)

def CacheStartBackendsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBackendsVector(builder, numElems):
    return CacheStartBackendsVector(builder, numElems)

def CacheAddTuned(builder, tuned):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tuned), 0)

def AddTuned(builder, tuned):
    CacheAddTuned(builder, tuned)

def CacheStartTunedVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTunedVector(builder, numElems):
    return CacheStartTunedVector(builder, numElems)

def CacheEnd(builder):
    return builder.EndObject()

def End(builder):
    return CacheEnd(builder)
