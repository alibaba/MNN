#version 450 core
layout(std430) buffer;

layout(set=0, binding=0) uniform mediump sampler2D uInput;
layout(set=0, binding=1) writeonly restrict mediump uniform image2D uOutput;

layout(set = 0, binding = 2) uniform reluBuffer{
    ivec4 inImgSize;
    ivec4 outImgSize;
    vec4 scale;
}uResizeParam;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main()
{
	ivec3 pos = ivec3(gl_GlobalInvocationID);
	// input output layout is NC4HW4

	ivec3 inputImgSize = uResizeParam.inImgSize.xyz;
	ivec3 outputImgSize = uResizeParam.outImgSize.xyz;

    if(pos.x < outputImgSize.x && pos.y < outputImgSize.y)
	{
		float srcX = float(pos.x) * uResizeParam.scale.x + uResizeParam.scale.y;
		int x1 = int(floor(srcX));
		int x11 = clamp(x1, 0, inputImgSize.x - 1);

		float srcY = float(pos.y) * uResizeParam.scale.z + uResizeParam.scale.w;
		int y1 = int(floor(srcY));
		int y11 = clamp(y1, 0, inputImgSize.y - 1);
        int sz = pos.z % inputImgSize.z;
        int sb = pos.z / inputImgSize.z;

		vec4 outValue = texelFetch(uInput, ivec2(x11+sz*inputImgSize.x, y11+sb*inputImgSize.y), 0);
		
		imageStore(uOutput, ivec2(pos.x+sz*outputImgSize.x, pos.y+sb*outputImgSize.y), outValue);
	}

}
