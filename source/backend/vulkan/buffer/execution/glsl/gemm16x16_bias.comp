#version 440 core
#ifdef FP16
#extension GL_AMD_gpu_shader_half_float: enable
#define FLOAT4 f16vec4
#define MAT4 f16mat4
#extension GL_AMD_gpu_shader_half_float: enable
#else
#define FLOAT4 vec4
#define MAT4 mat4
#endif
layout(std430) buffer;
layout(set=0, binding=0) writeonly buffer destBuffer{
    FLOAT4 data[];
}uOutBuffer;

layout(set=0, binding=1) readonly buffer sourceBuffer0{
    FLOAT4 data[];
} uInBuffer0;

layout(set=0, binding=2) readonly buffer sourceBuffer1{
    FLOAT4 data[];
} uInBuffer1;

layout(set=0, binding=3) readonly restrict uniform constBuffer {
    ivec4 outputSize;//eUnit, hUnit, h, l
}uConst;

layout(set=0, binding=4) readonly buffer sourceBuffer3{
    FLOAT4 data[];
} uBias;

layout (local_size_x = 2, local_size_y = 4, local_size_z = 1) in;

void main()
{
    ivec3 pos = ivec3(gl_GlobalInvocationID);
    if (pos.x < uConst.outputSize.x && pos.y < uConst.outputSize.y)
    {
        FLOAT4 o0 = FLOAT4(0);
        FLOAT4 o1 = FLOAT4(0);
        FLOAT4 o2 = FLOAT4(0);
        FLOAT4 o3 = FLOAT4(0);
        FLOAT4 o4 = FLOAT4(0);
        FLOAT4 o5 = FLOAT4(0);
        FLOAT4 o6 = FLOAT4(0);
        FLOAT4 o7 = FLOAT4(0);
        int multiLength = uConst.outputSize.w;
        int kernelY = pos.y + pos.z * uConst.outputSize.y;
        int srcY = pos.x + pos.z * uConst.outputSize.x;

        for (int k=0; k<multiLength; ++k)
        {
            FLOAT4 S = uInBuffer0.data[2 * (k + pos.x * multiLength) + 0];
            FLOAT4 S2 = uInBuffer0.data[2 * (k + pos.x * multiLength) + 1];
            FLOAT4 K = uInBuffer1.data[k + pos.y * multiLength];
            o0 += S * K.x;
            o1 += S * K.y;
            o2 += S * K.z;
            o3 += S * K.w;
            o4 += S2 * K.x;
            o5 += S2 * K.y;
            o6 += S2 * K.z;
            o7 += S2 * K.w;
        }
        int h =  uConst.outputSize.z;
        int dstOffset = 2 * (pos.x * h + pos.y * 4);
        FLOAT4 bias = uBias.data[pos.y];
        uOutBuffer.data[dstOffset + 0] = o0 + FLOAT4(bias.x);
        uOutBuffer.data[dstOffset + 1] = o4 + FLOAT4(bias.x);
        if (pos.y * 4 + 1 < h) {
            uOutBuffer.data[dstOffset + 2] = o1 + FLOAT4(bias.y);
            uOutBuffer.data[dstOffset + 3] = o5 + FLOAT4(bias.y);
        }
        if (pos.y * 4 + 2 < h) {
            uOutBuffer.data[dstOffset + 4] = o2 + FLOAT4(bias.z);
            uOutBuffer.data[dstOffset + 5] = o6 + FLOAT4(bias.z);
        }
        if (pos.y * 4 + 3 < h) {
            uOutBuffer.data[dstOffset + 6] = o3 + FLOAT4(bias.w);
            uOutBuffer.data[dstOffset + 7] = o7 + FLOAT4(bias.w);
        }
    }
}
