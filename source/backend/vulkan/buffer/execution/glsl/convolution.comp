#version 440 core

#ifdef FP16
#extension GL_AMD_gpu_shader_half_float: enable
#define FLOAT4 f16vec4
#define MAT4 f16mat4
#extension GL_AMD_gpu_shader_half_float: enable
#else
#define FLOAT4 vec4
#define MAT4 mat4
#endif
layout(std430) buffer;
layout(set=0, binding=0) writeonly buffer destBuffer{
    FLOAT4 data[];
}uOutput;

layout(set=0, binding=1) readonly buffer inputBuffer {
    FLOAT4 data[];
} uInput;

layout(set=0, binding=2) readonly buffer KernelBuffer{
    FLOAT4 data[];
} uKernel;

layout(set=0, binding=3) readonly buffer BiasBuffer{
    FLOAT4 data[];
} uBias;

layout(set=0, binding=4) uniform constBuffer {
    ivec2 pad;
    ivec2 kernelSize;
    ivec2 stride;
    ivec2 dilate;
    ivec4 inputSize;
    ivec4 outputSize;
    ivec4 offset;//batchOffset, hOffset, outputHeight, other
} uConstant;

#define UP_DIV(x, y) (((x)+(y)-1)/(y))

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main()
{
    int gpuIndex = int(gl_GlobalInvocationID.x);
    int gpuIndexX = gpuIndex % uConstant.outputSize.x;
    int temp = gpuIndex / uConstant.outputSize.x;
    int gpuIndexY = temp % uConstant.outputSize.y;
    int gpuIndexZ = temp / uConstant.outputSize.y;
    ivec3 pos = ivec3(gpuIndexX, gpuIndexY, gpuIndexZ);
    ivec3 outputSize = uConstant.outputSize.xyz;
    int oz = pos.z / uConstant.outputSize.w;
    int ob = pos.z % uConstant.outputSize.w;

    if (gpuIndex < uConstant.outputSize.x * uConstant.outputSize.y * uConstant.outputSize.z * uConstant.outputSize.w)
    {
        ivec3 inputSize = uConstant.inputSize.xyz;
        ivec2 s0 = pos.xy*uConstant.stride-uConstant.pad;
        ivec2 sta = max(ivec2(0, 0), (UP_DIV(-s0, uConstant.dilate)));
        ivec2 end = min(uConstant.kernelSize, UP_DIV(uConstant.inputSize.xy - s0, uConstant.dilate));
        int fx, fy, fz;
        vec4 color = uBias.data[oz];
        for (fy=sta.y; fy<end.y; ++fy)
        {
            int sy = fy*uConstant.dilate.y + s0.y;
            for (fx=sta.x; fx<end.x; ++fx)
            {
                int sx = fx*uConstant.dilate.x + s0.x;
                int kPosOffset = (fx+fy*uConstant.kernelSize.x + oz * uConstant.kernelSize.x * uConstant.kernelSize.y) * uConstant.inputSize.z;
                for (fz=0; fz<uConstant.inputSize.z; ++fz)
                {
                    int iPos = sx
                        + sy * uConstant.inputSize.x
                        + fz * uConstant.inputSize.x * uConstant.inputSize.y * uConstant.inputSize.w
                        + ob * uConstant.inputSize.x * uConstant.inputSize.y
                        ;
                    vec4 inputValue = uInput.data[iPos];
                    vec4 k0 = uKernel.data[(kPosOffset+fz) * 4 + 0];
                    vec4 k1 = uKernel.data[(kPosOffset+fz) * 4 + 1];
                    vec4 k2 = uKernel.data[(kPosOffset+fz) * 4 + 2];
                    vec4 k3 = uKernel.data[(kPosOffset+fz) * 4 + 3];
                    color  += k0*inputValue.x;
                    color  += k1*inputValue.y;
                    color  += k2*inputValue.z;
                    color  += k3*inputValue.w;
                }
            }
        }

#ifdef RELU
        color = max(color, vec4(0));
#endif
#ifdef RELU6
        color = clamp(color, vec4(0), vec4(6));
#endif
        int oPos = pos.x
            + pos.y * uConstant.outputSize.x
            + pos.z * uConstant.outputSize.x * uConstant.outputSize.y
            ;
        uOutput.data[oPos] = color;
    }
}
