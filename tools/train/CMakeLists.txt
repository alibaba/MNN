option(MNN_TRAIN_DEBUG "Enable MNN Train Grad Debug" OFF)
option(MNN_BUILD_TRAIN_MINI "Don't build dataset and models" OFF)
option(MNN_USE_OPENCV "Use opencv" OFF)

include_directories(${CMAKE_CURRENT_LIST_DIR}/source/grad)
include_directories(${CMAKE_CURRENT_LIST_DIR}/source/optimizer)
include_directories(${CMAKE_CURRENT_LIST_DIR}/source/transformer)
include_directories(${CMAKE_CURRENT_LIST_DIR}/source/data)
include_directories(${CMAKE_CURRENT_LIST_DIR}/source/nn)
include_directories(${CMAKE_CURRENT_LIST_DIR}/source/models)
include_directories(${CMAKE_CURRENT_LIST_DIR}/source/datasets)
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/../../)
file(GLOB GRAD ${CMAKE_CURRENT_LIST_DIR}/source/grad/*)
file(GLOB TRANSFORMER ${CMAKE_CURRENT_LIST_DIR}/source/transformer/*)
file(GLOB OPTIMIZER ${CMAKE_CURRENT_LIST_DIR}/source/optimizer/*)
file(GLOB DATALOADER ${CMAKE_CURRENT_LIST_DIR}/source/data/*)
file(GLOB MODELS ${CMAKE_CURRENT_LIST_DIR}/source/models/*)
file(GLOB NNFILES ${CMAKE_CURRENT_LIST_DIR}/source/nn/*)
file(GLOB DATASETS ${CMAKE_CURRENT_LIST_DIR}/source/datasets/*)

# MNNTrain
IF (MNN_TRAIN_DEBUG)
    add_definitions(-DMNN_TRAIN_DEBUG)
ENDIF()
if(MNN_BUILD_TRAIN_MINI)
    set(MNN_TRAIN_SRCS ${GRAD} ${BASIC_INCLUDE} ${OPTIMIZER} ${DATALOADER} ${TRANSFORMER} ${NNFILES})
else()
    set(MNN_TRAIN_SRCS ${GRAD} ${BASIC_INCLUDE} ${OPTIMIZER} ${DATALOADER} ${TRANSFORMER} ${NNFILES} ${MODELS} ${DATASETS})
endif()
IF(MNN_SEP_BUILD)
    add_library(MNNTrain SHARED ${MNN_TRAIN_SRCS})
    target_link_libraries(MNNTrain MNN MNN_Express)
ELSE()
    add_library(MNNTrain OBJECT ${MNN_TRAIN_SRCS})
ENDIF()
target_compile_definitions(MNNTrain PRIVATE STB_IMAGE_STATIC STB_IMAGE_IMPLEMENTATION)

# executables
set(MNN_TRAIN_TOOLS "")
add_executable(transformer.out ${CMAKE_CURRENT_LIST_DIR}/source/exec/transformerExecution.cpp ${TRANSFORMER})
add_executable(train.out ${CMAKE_CURRENT_LIST_DIR}/source/exec/train.cpp ${SCHEMA} ${BASIC_INCLUDE})
add_executable(rawDataTransform.out ${CMAKE_CURRENT_LIST_DIR}/source/exec/rawDataTransform.cpp ${SCHEMA} ${BASIC_INCLUDE})
add_executable(dataTransformer.out ${CMAKE_CURRENT_LIST_DIR}/source/exec/dataTransformer.cpp ${SCHEMA} ${BASIC_INCLUDE})
file(GLOB DEMOSOURCE ${CMAKE_CURRENT_LIST_DIR}/source/demo/*)
if (MNN_BUILD_TRAIN_MINI)
    add_executable(runTrainDemo.out ${DEMOSOURCE} ${BASIC_INCLUDE} ${DATASETS} ${MODELS})
else()
    add_executable(runTrainDemo.out ${DEMOSOURCE} ${BASIC_INCLUDE})
endif()
target_include_directories(runTrainDemo.out PRIVATE ../../3rd_party/imageHelper/)

list(APPEND MNN_TRAIN_TOOLS transformer.out)
list(APPEND MNN_TRAIN_TOOLS train.out)
list(APPEND MNN_TRAIN_TOOLS rawDataTransform.out)
list(APPEND MNN_TRAIN_TOOLS dataTransformer.out)
list(APPEND MNN_TRAIN_TOOLS runTrainDemo.out)
foreach(TARGET ${MNN_TRAIN_TOOLS})
    target_link_libraries(${TARGET} PRIVATE ${MNN_DEPS})
    IF(MNN_SEP_BUILD)
        target_link_libraries(${TARGET} PRIVATE MNNTrain)
    ENDIF()
    if (MSVC)
        target_compile_definitions(${TARGET} PRIVATE "_CRT_SECURE_NO_WARNINGS")
        if (NOT MNN_BUILD_SHARED_LIBS)
            foreach (DEPEND ${MNN_DEPS})
                target_link_options(${TARGET} PRIVATE /WHOLEARCHIVE:$<TARGET_FILE:${DEPEND}>)
            endforeach ()
            IF(MNN_SEP_BUILD)
                target_link_options(${TARGET} PRIVATE /WHOLEARCHIVE:$<TARGET_FILE:MNNTrain>)
            ENDIF()
        endif()
    endif()
endforeach()

if (MNN_USE_OPENCV)
    set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS_ORIGIN})
    set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS_ORIGIN})
    find_package(OpenCV REQUIRED)
    target_include_directories(runTrainDemo.out PRIVATE ${OpenCV_INCLUDE_DIRS})
    add_definitions(-DMNN_USE_OPENCV)
    target_link_libraries(runTrainDemo.out PRIVATE ${OpenCV_LIBS})
endif()
