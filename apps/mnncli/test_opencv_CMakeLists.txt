cmake_minimum_required(VERSION 3.16)
project(OpenCVTest)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Check if OpenCV Android SDK is provided
if(DEFINED OPENCV_ANDROID_SDK)
    message(STATUS "Using OpenCV Android SDK: ${OPENCV_ANDROID_SDK}")
    
    # Set OpenCV paths for Android
    set(OpenCV_DIR "${OPENCV_ANDROID_SDK}/sdk/native/jni")
    set(OpenCV_INCLUDE_DIRS "${OPENCV_ANDROID_SDK}/sdk/native/jni/include")
    
    # Determine the correct ABI for OpenCV libraries
    if(DEFINED ANDROID_ABI)
        set(OpenCV_LIBS "${OPENCV_ANDROID_SDK}/sdk/native/libs/${ANDROID_ABI}/libopencv_java4.so")
    else()
        # Default to arm64-v8a if ABI not specified
        set(OpenCV_LIBS "${OPENCV_ANDROID_SDK}/sdk/native/libs/arm64-v8a/libopencv_java4.so")
    endif()
    
    # Verify OpenCV include directory exists
    if(EXISTS "${OpenCV_INCLUDE_DIRS}")
        message(STATUS "OpenCV include directory found: ${OpenCV_INCLUDE_DIRS}")
    else()
        message(FATAL_ERROR "OpenCV include directory not found: ${OpenCV_INCLUDE_DIRS}")
    endif()
    
    # Verify OpenCV library exists
    if(EXISTS "${OpenCV_LIBS}")
        message(STATUS "OpenCV library found: ${OpenCV_LIBS}")
    else()
        message(FATAL_ERROR "OpenCV library not found: ${OpenCV_LIBS}")
    endif()
    
    # Create test executable
    add_executable(opencv_test test_opencv_simple.cpp)
    
    # Add OpenCV include directories
    target_include_directories(opencv_test PRIVATE ${OpenCV_INCLUDE_DIRS})
    
    # Link OpenCV libraries
    target_link_libraries(opencv_test PRIVATE ${OpenCV_LIBS})
    
    # Add compile definition to indicate OpenCV is available
    target_compile_definitions(opencv_test PRIVATE OPENCV_AVAILABLE)
    
    message(STATUS "OpenCV test executable configured successfully")
else()
    message(FATAL_ERROR "OPENCV_ANDROID_SDK not defined")
endif()
